/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'kotlin-android-extensions'
apply from: "$project.rootDir/automation/gradle/versionCode.gradle"

import com.android.build.gradle.internal.tasks.AppPreBuildTask
import com.android.build.OutputFile

android {
    compileSdkVersion Config.compileSdkVersion

    defaultConfig {
        applicationId "org.mozilla.tv.firefox-unoffical"
        minSdkVersion Config.minSdkVersion
        compileSdkVersion Config.targetSdkVersion
        targetSdkVersion Config.targetSdkVersion
        versionCode 11
        versionName Config.generateDebugVersionName()

        testInstrumentationRunner "org.mozilla.tv.firefox.FirefoxOnDeviceTestRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        multiDexEnabled true

        ndk {
            // This strips unused architectures out of our build, lowering out APK size.
            // At this time, all FFTV devices run ARM v7, and most emulators use x86. See
            // #2647 for details
            // TODO improve APK size further in #2743
            abiFilters 'armeabi-v7a', 'x86'
        }
    }

    dexOptions {
        preDexLibraries true
    }

    buildFeatures {
        compose true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions "engine"

    productFlavors {
        system {
            applicationIdSuffix ".system"
            dimension "engine"
        }

        gecko {
            dimension "engine"
        }
    }

    sourceSets {
        test {
            resources {
                // Make the default asset folder available as test resource folder. This is only
                // necessary for SearchEngineParserTest.getBasePath, which access the test resources
                // before RuntimeEnvironment.application is available.
                srcDir "${projectDir}/src/main/assets/"
            }
        }
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests.includeAndroidResources true // for robolectric.
    }

    lintOptions {
        lintConfig file("lint.xml")
        //baseline file("lint-baseline.xml")

        // We want to fail the build if there is a lint error, otherwise we'll never fix them.
        // This is the most efficient way to make Lint fail: the lint tool will add additional
        // checks in the future so this ensures they will fail our build as soon as they are added,
        // unlike a whitelist.
        //warningsAsErrors true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/atomicfu.kotlin_module'
    }

    bundle {
        abi {
            enableSplit = true
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        //allWarningsAsErrors = true
    }
}

configurations {
    geckoImplementation {}
    systemImplementation {}
}

dependencies {
    implementation Deps.mozilla_concept_engine
    implementation Deps.mozilla_concept_menu
    implementation Deps.mozilla_concept_tabstray
    implementation Deps.mozilla_concept_toolbar
    implementation Deps.mozilla_concept_storage
    implementation Deps.mozilla_concept_sync
    implementation Deps.mozilla_concept_push

    // Engine
    geckoImplementation Deps.mozilla_browser_engine_gecko
    systemImplementation Deps.mozilla_browser_engine_system

    implementation Deps.mozilla_browser_awesomebar
    implementation Deps.mozilla_browser_domains
    implementation Deps.mozilla_browser_tabstray
    implementation Deps.mozilla_browser_toolbar
    implementation Deps.mozilla_browser_menu
    implementation Deps.mozilla_browser_menu2
    implementation Deps.mozilla_browser_session
    implementation Deps.mozilla_browser_session_storage
    implementation Deps.mozilla_browser_state
    implementation Deps.mozilla_browser_storage_sync
    implementation Deps.mozilla_browser_icons
    implementation Deps.mozilla_browser_thumbnails

    implementation Deps.mozilla_feature_accounts
    implementation Deps.mozilla_feature_accounts_push
    implementation Deps.mozilla_feature_addons
    implementation Deps.mozilla_feature_app_links
    implementation Deps.mozilla_feature_awesomebar
    implementation Deps.mozilla_feature_autofill
    implementation Deps.mozilla_feature_contextmenu
    implementation Deps.mozilla_feature_customtabs
    implementation Deps.mozilla_feature_findinpage
    implementation Deps.mozilla_feature_media
    implementation Deps.mozilla_feature_sitepermissions
    implementation Deps.mozilla_feature_intent
    implementation Deps.mozilla_feature_search
    implementation Deps.mozilla_feature_session
    implementation Deps.mozilla_feature_toolbar
    implementation Deps.mozilla_feature_tabs
    implementation Deps.mozilla_feature_downloads
    implementation Deps.mozilla_feature_prompts
    implementation Deps.mozilla_feature_push
    implementation Deps.mozilla_feature_pwa
    implementation Deps.mozilla_feature_qr
    implementation Deps.mozilla_feature_readerview
    implementation Deps.mozilla_feature_syncedtabs
    implementation Deps.mozilla_feature_webauthn
    implementation Deps.mozilla_feature_webcompat
    implementation Deps.mozilla_feature_webnotifications

    implementation Deps.mozilla_ui_autocomplete
    implementation Deps.mozilla_ui_colors
    implementation Deps.mozilla_ui_icons
    implementation Deps.mozilla_ui_tabcounter

    implementation Deps.mozilla_service_firefox_accounts
    implementation Deps.mozilla_service_location
    implementation Deps.mozilla_service_sync_logins

    implementation Deps.mozilla_support_images
    implementation Deps.mozilla_support_utils
    implementation Deps.mozilla_support_ktx
    implementation Deps.mozilla_support_rustlog
    implementation Deps.mozilla_support_rusthttp
    implementation Deps.mozilla_support_webextensions

    implementation Deps.mozilla_lib_crash
    implementation Deps.mozilla_lib_push_firebase
    implementation Deps.mozilla_lib_publicsuffixlist
    implementation Deps.mozilla_lib_dataprotect

    implementation Deps.thirdparty_sentry

    implementation Deps.kotlin_stdlib
    implementation Deps.kotlin_coroutines

    implementation Deps.androidx_appcompat
    implementation Deps.androidx_core_ktx
    implementation Deps.androidx_constraintlayout
    implementation Deps.androidx_preference_ktx
    implementation Deps.androidx_work_runtime_ktx

    implementation Deps.androidx_activity_compose
    implementation Deps.androidx_compose_ui
    implementation Deps.androidx_compose_ui_tooling
    implementation Deps.androidx_compose_foundation
    implementation Deps.androidx_compose_material

    implementation Deps.google_material

    androidTestImplementation Deps.uiautomator

    androidTestImplementation Deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation(Deps.espresso_contrib) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-v4'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'design'
        exclude module: 'espresso-core'
    }

    androidTestImplementation Deps.espresso_idling_resources
    androidTestImplementation Deps.espresso_web, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestImplementation Deps.mockwebserver
    androidTestImplementation Deps.tools_test_runner
    androidTestImplementation Deps.tools_test_rules
    androidTestUtil Deps.orchestrator
    androidTestImplementation Deps.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// -------------------------------------------------------------------------------------------------
// Activating crash reports with command line parameter.
// -------------------------------------------------------------------------------------------------
    if (project.hasProperty("crashReportEnabled") && project.property("crashReportEnabled") == "true") {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'true'
    } else {
        buildConfigField 'boolean', 'CRASH_REPORTING_ENABLED', 'false'
    }

// -------------------------------------------------------------------------------------------------
// Activating telemetry  with command line paramter.
// -------------------------------------------------------------------------------------------------

if (project.hasProperty("telemetry") && project.property("telemetry") == "true") {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'true'
} else {
    buildConfigField 'boolean', 'TELEMETRY_ENABLED', 'false'
}

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    if (buildType == "release") {
        variant.outputs.all { output ->
            setVersionCodeOverride(generatedVersionCode)
        }
    }

    println("Build type: " + buildType + " (versionCode = " + variant.mergedFlavor.versionCode + ")")
}

// Disable unit tests for gecko since we don't actively support gecko variant for FFTV
gradle.taskGraph.useFilter { task ->
    if (task.name.startsWith("test") && task.name.contains("Gecko")) {
        return true;
    }

    return true;
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Firefox TV provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-");
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListDir = 'src/main/java/org/mozilla/tv/firefox/generated'
def generatedLocaleListFilename = 'LocaleList.java'

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.tv.firefox.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

// -------------------------------------------------------------------------------------------------
// Task for printing APK information for the requested variant
// Usage: ./gradlew printVariants
// -------------------------------------------------------------------------------------------------
task printVariants {
    doLast {
        def variants = android.applicationVariants.collect { variant -> [
                apks: variant.outputs.collect { output -> [
                        abi: output.getFilter(com.android.build.VariantOutput.FilterType.ABI),
                        fileName: output.outputFile.name
                ]},
                build_type: variant.buildType.name,
                name: variant.name,
        ]}
        println 'variants: ' + groovy.json.JsonOutput.toJson(variants)
    }
}

task printGeckoviewVersion {
    doLast {
        def configuration = configurations.implementationDependenciesMetadata
        def dependencies = configuration.incoming.resolutionResult.allDependencies
        def geckoviewDependency = dependencies.find { it.selected.id.moduleIdentifier.group == 'org.mozilla.geckoview' }
        println('geckoviewVersion: ' + groovy.json.JsonOutput.toJson(geckoviewDependency.selected.moduleVersion.version))
    }
}

if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopsrcdir')) {
    if (gradle.hasProperty('localProperties.dependencySubstitutions.geckoviewTopobjdir')) {
        ext.topobjdir = gradle."localProperties.dependencySubstitutions.geckoviewTopobjdir"
    }
    ext.topsrcdir = gradle."localProperties.dependencySubstitutions.geckoviewTopsrcdir"
    apply from: "${topsrcdir}/substitute-local-geckoview.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.android-components.dir')) {
    ext.acSrcDir = gradle."localProperties.autoPublish.android-components.dir"
    apply from: "../${acSrcDir}/substitute-local-ac.gradle"
}

if (gradle.hasProperty('localProperties.autoPublish.application-services.dir')) {
    ext.appServicesSrcDir = gradle."localProperties.autoPublish.application-services.dir"
    apply from: "../${appServicesSrcDir}/build-scripts/substitute-local-appservices.gradle"
}
